#!/bin/bash

### wien2wannier/SRC/wannier90_lapw
###
###    Wrapper script for wannier90.x to handle -up/-dn/-so options
###    and supply the ‘seedname’ argument
###
###    Wannier90 is an independent program from wien2wannier.  You can
###    get it from <http://wannier.org/>.  See the wien2wannier user's
###    guide for hints on compiling Wannier90 in conjunction with
###    wien2wannier.
###
###    In publications arising from use of Wannier90, please cite
###
###       A. A. Mostofi, J. R. Yates, Y.-S. Lee, I. Souza,
###       D. Vanderbilt and N. Marzari, “Wannier90: A Tool for
###       Obtaining Maximally-Localised Wannier Functions”,
###       Comput. Phys. Commun. 178, 685 (2008)
###
###    (as well as wien2wannier, if appropriate).
###
###    Questions about Wannier90 should be addressed to the dedicated
###    mailing list at <http://www.democritos.it/mailman/listinfo/wannier>.
###
###    While this script is only a thin wrapper on Wannier90, you are
###    advised to use it whenever using wien2wannier, to make sure
###    certain files will be where other programs expect them.
###
### Copyright 2013-2015 Elias Assmann
###
### $Id: wannier90_lapw 437 2015-09-03 18:21:30Z assmann $

# Wannier90 executable
W90=wannier90.x
bin=$(dirname $0)
[[ ! -d $bin ]] && bin=.

updn=
so=
file=$(basename $PWD)
v=
q=
pp=

name=$(basename $0)

usage () {
    cat <<EOF
PROGRAM:	$0

PURPOSE:	wrapper script for \`wannier90.x'

USAGE:		$name [OPTIONS]

FLAGS:
-h,-H	->	this message
-v,-verbose ->	print more
-q,-quiet ->	print less
-f	->	override  \`case'
-up/-dn	->	spin-polarized
-so	->	spin-orbit coupling
-pp     ->      run \`\`-pp'' step producing case.nnkp
EOF
}

croak () {
    echo >&2 "$name: $@"
    exit 1
}

warn () {
    [[ $q ]] && return
    echo >&2 "$name: $@"
}

myln () {
    # link already in place, or non-sp
    [[ $1 -ef $2 ]] && continue

    lnopt=f
    if [[ ! $q && -s $new && ! -L $new ]]; then
        warn $new already exists
        lnopt=i
    fi

    ln -s$lnopt $v $1 $2
}


## Option handling ##
while true; do
    case $1 in
        -[hH]|-help|--help)
            usage
            exit 0;;
        -v|-verbose)
            v="-v";;
	-q|-quiet)
	    q="-f";;

	-up) updn=up;;
	-dn) updn=dn;;
	-so) so=so;;
	-pp) pp=-pp;;

	-f) file=$2;   shift;;

	--) shift
	    break;;

        -*) croak "unkown option \`\`$1'' (try --help)";;

        *)  break;;
    esac

    shift
done

if [[ $pp && $updn ]]; then
    warn -pp should be used without -up/-dn
    updn=
fi

if [[ $so && $updn ]]; then
    warn -so should be used without -up/-dn
    updn=
fi


## Set up files ##

## check if required files exist
reqfiles="amn mmn eig"
[[ $so ]] && reqfiles="amnup amndn mmnup mmndn"
[[ $pp ]] && reqfiles=
for r in $reqfiles; do
    req=$file.$r$updn

    [[ -s $req ]] || croak required file $req does not exist
done

## spin-summation for SO + SP
if [[ $so ]]; then
    if [[ -s $file.eigup ]]; then
        myln $file.eigup $file.eig
    fi

    $bin/x w2waddsp
fi

## link “spin-polarized” files required by Wannier90 to the names it
## expects
spfiles=
[[ $updn && ! $so ]] && spfiles="amn mmn eig chk"
for s in $spfiles; do
    new=$file.$s
    old=$file.$s$updn

    myln $old $new
done


## Call wannier90 ##
$W90 $pp $file
status=$?


## Manage output files ##
spfiles=".wout .werr _band.dat _centres.xyz .chk"
[[ $pp ]] && spfiles=
[[ $updn ]] || spfiles=
for s in $spfiles; do
    old=$file$s
    new=$file$s$updn

    [[ -s $old ]] || continue

    mv $q $v $old $new
done


## Exit with wannier90's exit status
## (though currently it always returns 0)
exit $status


## Time-stamp: <2015-09-03 20:13:24 elias@hupuntu>
