###############################################################################
#                                                                             #
#                          IBM RS6000  AIX 3.2.x                              #
#                                                                             #
#  make           ... generate executable for the REAL-version                #
#  make complex   ... generate executable for the COMPLEX-version             #
#  make clean     ... delete unnecessary files                                #
#                                                                             #
###############################################################################
#
# FC ........... compiler name
# FOPT ......... optimization flags
# FGEN ......... code generation flags (flags not related to optimization)
# LDFLAGS ...... linker flags
# R_LIBS ....... libraries needed to build the REAL executable
# C_LIBS ....... libraries needed to build the COMPLEX executable
# DESTDIR ...... dir. where the executable should go (without trailing '/'!)
# R_EXECNAME ... name of the resulting REAL executable (without prefixed path!)
# C_EXECNAME ... name of the resulting COMPLEX executable ( -"- )
#
SHELL = /bin/sh
FC = ifort
MPF = mpif90
CC = cc
FOPT = -FR -mp1 -w -prec_div -pc80 -pad -align -DINTEL_VML -traceback
FPOPT =  $(FOPT)
DParallel = '-DParallel'
FGEN = $(PARALLEL)
LDFLAGS =  -pthread -static
R_LIBS = -L/opt/intel/Compiler/11.1/046/mkl/lib/em64t -Wl,--start-group -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group -lpthread -openmp
C_LIBS = $(R_LIBS)
RP_LIBS = $(R_LIBS)
CP_LIBS = $(R_LIBS)

DESTDIR	= .
R_EXECNAME = w2wr
C_EXECNAME = w2wc

###############################################################################

TYPE='REAL'
TYPE_COMMENT='!_REAL'
FFLAGS = $(FGEN) $(FOPT)
R_EXEC = $(DESTDIR)/$(R_EXECNAME)
C_EXEC = $(DESTDIR)/$(C_EXECNAME)

#..............................................................................
#
#  Object files common to both REAL and COMPLEX type subroutines
#
#
OBJS    = reallocate.o modules.o abc.o atpar.o dvbes1.o \
          errclr.o diracout.o errflg.o  dergl.o  \
          gtfnam2.o harmon.o gaunt1.o gaunt2.o \
          inverss.o l2mmn.o l2amn.o main.o  latgen.o outerr.o \
          outwin.o  ph.o rint13.o inouh.o inth.o \
          rotate.o sphbes.o read_vec.o \
          ylm.o mknam.o planew.o cputim.o \
          radint.o rout.o rotdef.o almgen.o


#..............................................................................
#
#  Object files for REAL and COMPLEX versions
#
R_OBJS = $(OBJS) 
C_OBJS = $(OBJS)

#..............................................................................
#
#  Some source files contain both REAL and COMPLEX versions. These files
#  have the file extension '.frc' and must be treated differently.
#
.SUFFIXES:	.frc

#..............................................................................
#
#  Build executable (either REAL or COMPLEX versions)
#
real: rm_c_files
	$(MAKE) TYPE='REAL' TYPE_COMMENT='!_REAL' $(R_EXEC)

complex: rm_r_files
	$(MAKE) TYPE='COMPLEX' TYPE_COMMENT='!_COMPLEX' $(C_EXEC)

#..............................................................................

$(R_EXEC): $(R_OBJS)
	$(FC) -o $(R_EXEC) $(R_OBJS) $(LDFLAGS) $(R_LIBS)

$(C_EXEC): $(C_OBJS)
	$(FC) -o $(C_EXEC) $(C_OBJS) $(LDFLAGS) $(C_LIBS)

rm_c_files:
	if [ -f .complex ]; then \
	   $(MAKE) clean; \
	fi
	touch .real

rm_r_files:
	if [ -f .real ]; then \
	   $(MAKE) clean; \
	fi
	touch .complex

#..............................................................................
#
#  All routines depend upon an include file (contains common PARAMETERS)
#
$(R_OBJS):		
$(C_OBJS):		

#..............................................................................
#
#  remove unnecessary files (executable(s) are not removed)
#
# Dependancies
$(OBJS):		Makefile

clean:
	-rm -f *.o _tmp_.* *.P .real .complex *.mod

#..............................................................................
#
#  define inference rules to generate object files from source files
#  (From .frc files the appropriatly typed subroutine (REAL/COMPLEX) has to
#  be extracted first.)
#
.f.o:
	$(FC) $(FFLAGS) -c $<
.frc.o:
	@sed -e 's/^$(TYPE_COMMENT)//'   $< >$*_tmp.f
	@echo "$<: $(TYPE) version extracted"
	$(FC) $(FFLAGS) -c $*_tmp.f
	mv $*_tmp.o $*.o
	rm $*_tmp.f
